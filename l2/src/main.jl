include("linear_regression.jl") # Get k coefficients
include("data.jl")

function T(z, Tw=2e3, T‚ÇÄ=1e4, p=4)
    @assert 0 ‚â§ z ‚â§ 1 "$z"
    return (Tw - T‚ÇÄ) * z^p + T‚ÇÄ
end

function u‚Çö(z)
    @assert 0 ‚â§ z ‚â§ 1 "$z"
    üå≠ = 3.084 * 1e-4
    ü¶ñ = exp(4.799 * 1e4 / T(z)) - 1
    return üå≠ / ü¶ñ
end

function k(ü¶ì, üéª)
    @assert 0 ‚â§ ü¶ì ‚â§ 1 "$ü¶ì"
    @assert üéª == 1 || üéª == 2 # Variant 1 or 2
    üßô = LinearRegression.m
    üêà = LinearRegression.c
    return exp(üßô[üéª] * log(T(ü¶ì)) + üêà[üéª])
end

# function rk4(f, x, u‚Çô, h)
#     # u'(x) = f(x, u)
#     k1 = f(x, u‚Çô)
#     k2 = f(x + h / 2, u‚Çô + h / 2 * k1)
#     k3 = f(x + h / 2, u‚Çô + h / 2 * k2)
#     k4 = f(x + h, u‚Çô + h * k3)
#     u‚Çô‚Çä‚ÇÅ = u‚Çô + h / 6 * (k1 + 2 * k2 + 2 * k3 + k4)
#     return u‚Çô‚Çä‚ÇÅ
# end

function rk4(f, œï, x, u‚Çô, v‚Çô, h)
    # u'(x) = f(x, u, v)
    # v'(x) = œï(x, u, v)
    k1 = f(x, u‚Çô, v‚Çô)
    q1 = œï(x, u‚Çô, v‚Çô)
    k2 = f(x + h / 2, u‚Çô + h / 2 * k1, v‚Çô + h / 2 * q1)
    q2 = œï(x + h / 2, u‚Çô + h / 2 * k1, v‚Çô + h / 2 * q1)
    k3 = f(x + h / 2, u‚Çô + h / 2 * k2, v‚Çô + h / 2 * q2)
    q3 = œï(x + h / 2, u‚Çô + h / 2 * k2, v‚Çô + h / 2 * q2)
    k4 = f(x + h, u‚Çô + h * k3, v‚Çô + h * q3)
    q4 = œï(x + h, u‚Çô + h * k3, v‚Çô + h * q3)
    u‚Çô‚Çä‚ÇÅ = u‚Çô + h / 6 * (k1 + 2 * k2 + 2 * k3 + k4)
    v‚Çô‚Çä‚ÇÅ = v‚Çô + h / 6 * (q1 + 2 * q2 + 2 * q3 + q4)
    return u‚Çô‚Çä‚ÇÅ, v‚Çô‚Çä‚ÇÅ
end

function rk4_step(z, u‚Çô, F‚Çô, h, v)
    @assert 0 ‚â§ z ‚â§ 1 "$z"
    @assert v == 1 || v == 2 # Variant 1 or 2
    R = Data.R
    c = Data.c
    f(z, _, F) = -3 * R * k(z, v) * F / c
    œï(z, u, F) = R * c * k(z, v) * (u‚Çö(z) - u) - F / z
    if z == 0
        œï(z, u, _) = R * c * k(z, v) * (u‚Çö(z) - u)
    end
    return rk4(f, œï, z, u‚Çô, F‚Çô, h)
end

function shoot(v)
    @assert v == 1 || v == 2 # Variant 1 or 2
    Œæ‚ÇÄ, Œæ‚ÇÅ = 0, 1
    Œæ = (Œæ‚ÇÄ + Œæ‚ÇÅ) / 2
    œµ = 1e-6
    Œ¥ = Inf
    h = 1e-4
    c = Data.c
    zrange = 0:h:1-h
    while abs(Œ¥) > œµ
        u = Œæ * u‚Çö(0)
        F = 0
        for z in zrange
            u, F = rk4_step(z, u, F, h, v)
        end
        Œ¥ = F - 0.393 * c * u
        if Œ¥ > 0
            Œæ‚ÇÄ = Œæ
        else
            Œæ‚ÇÅ = Œæ
        end
        Œæ = (Œæ‚ÇÄ + Œæ‚ÇÅ) / 2
    end
    return Œæ
end

using GLMakie

function main()
    Œæ1 = shoot(1)
    Œæ2 = shoot(2)

    println("$Œæ1 $Œæ2")

    h = 1e-2
    zrange = 0:h:1-h

    u1 = Œæ1 * u‚Çö(0)
    F1 = 0.0
    u1v = [u1]
    F1v = [F1]
    for z in zrange
        u1, F1 = rk4_step(z, u1, F1, h, 1)
        append!(u1v, u1)
        append!(F1v, F1)
    end
    # println(u1v)
    # println(F1v)

    u2 = Œæ2 * u‚Çö(0)
    F2 = 0.0
    u2v = [u2]
    F2v = [F2]
    for z in zrange
        u2, F2 = rk4_step(z, u2, F2, h, 2)
        append!(u2v, u2)
        append!(F2v, F2)
    end
    # println(u2v)
    # println(F2v)

    fig = Figure()

    ax11 = Axis(fig[1, 1], title="–í–∞—Ä–∏–∞–Ω—Ç 1 (F)")
    ax12 = Axis(fig[1, 2], title="–í–∞—Ä–∏–∞–Ω—Ç 2 (F)")
    ax21 = Axis(fig[2, 1], title="–í–∞—Ä–∏–∞–Ω—Ç 1 (u)")
    ax22 = Axis(fig[2, 2], title="–í–∞—Ä–∏–∞–Ω—Ç 2 (u)")

    zrange = 0:h:1

    lines!(ax11, zrange, F1v, color=:blue, label="F")
    lines!(ax12, zrange, F2v, color=:blue, label="F")
    lines!(ax21, zrange, u1v, color=:red, label="u")
    lines!(ax22, zrange, u2v, color=:red, label="u")
    lines!(ax21, zrange, u‚Çö.(zrange), color=:green, label="u‚Çö")
    lines!(ax22, zrange, u‚Çö.(zrange), color=:green, label="u‚Çö")

    axislegend(ax11, position=:lt)
    axislegend(ax12, position=:lt)
    axislegend(ax21)
    axislegend(ax22)

    fig
end
